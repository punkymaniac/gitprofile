#!/bin/bash
### function ###

interrupt() {
  echo -e "\n$1"
  exit 0
}

print_help() {
  echo -e \
  "usage: $NEWGIT [OPTION]\n \
  -h --help:\t\thelp of $NEWGIT\n \
  -s --save:\t\tsave the current profile\n \
  -n --new:\t\tadd a new profile\n \
  -l --list:\t\tlist saved profile\n \
  -d --delete:\t\tdelete one profile\n \
  -u --use\t\tuse one profile saved\n \
  reset:\treset current profile\n \
  log:\t\toption based on git log\n \
     -l --list:\tlist commiter profile in project\n \
     -u --use:\t\tuse commiter profile\n \
     -s --save:\tsave commiter profile\n\n \
  And all git command (git --help)."
}

print_profile() {
  if [ -z $1 ] && [ -z $2 ] && [ -z $3] ; then
    name=$NAME
    email=$EMAIL
    key=$KEY
  else
    name=$1
    email=$2
    key=$3
  fi
  echo -e "  -> user.name: \033[36m$name\033[0m"
  echo -e "  -> user.email: \033[36m$email\033[0m"
  echo -e "  -> user.signingKey: \033[36m$key\033[0m"
}

add_profile() {
  IFS=':' read -a new <<< "$1"
  newName=${new[0]}
  newMail=${new[1]}
  newKey=${new[2]}
  listProfile=$(<$FILE)
  IFS=$'\n'
  for item in $listProfile
  do
    IFS=':' read -a p <<< "${item}"
    if [ "${p[0]}:${p[1]}:${p[2]}" = "$newName:$newMail:$newKey" ]; then
      echo -e "This profile is already saved"
      exit 0
    fi
  done
  echo -e "$newName:$newMail:$newKey:" >> "$FILE"
}

print_list_profile() {
  id=0
  IFS=";"
  for item in $1
  do
    id=$(($id + 1))
    IFS=':' read -a p <<< "${item}"
    if [ "${p[0]}" = "$NAME" ] && [ "${p[1]}" = "$EMAIL" ] && [ "${p[2]}" = "$KEY" ]; then
      echo -e "\033[32m [$id] ${p[0]} <${p[1]}> ${p[2]}\033[0m"
    else
      echo -e " [$id] ${p[0]} <${p[1]}> ${p[2]}"
    fi
  done
}

select_profile() {
  while [ 1 ]
  do
    read -p "Choice profile: " idC
    if [[ $idC =~ ^[0-9]+$ ]] && [ $idC -ne 0 ] && [ $idC -le $id ]; then
      break
    else
      echo -e "Invalid id"
    fi
  done
  i=$(($idC - 1))
  profiles=($1)
  IFS=':' read -a profile <<< "${profiles[$i]}"
}

use_profile() {
  IFS=':' read -a p <<< "$1"
  print_profile "${p[0]}" "${p[1]}" "${p[2]}"
  read -p "Configure with this profile (yes/no)? " choice
  if [ "$choice" = "yes" ] || [ "$choice" = "y" ]; then
    $GIT config user.name "${p[0]}"
    $GIT config user.email "${p[1]}"
    echo -e "${p[2]}"
    if ! [ -z "${p[2]}" ]; then
      $GIT config user.signingKey "${p[2]}"
    else
      $GIT config --unset user.signingKey
    fi
    echo -e "Profile changed in: "
    print_profile "${p[0]}" "${p[1]}" "${p[2]}"
  else
    interrupt "Profile not changed"
  fi
}

### end function ###


GIT="/usr/bin/git"
NEWGIT="git profile"
VERSION="$NEWGIT version 0.3"
FILE="$HOME/.gitprofile"

COMMIT_CHECK=$(printenv COMMIT_CHECK)
if [ "$?" -eq 1 ]; then
  COMMIT_CHECK=true
else
  COMMIT_CHECK=false
fi

DIR=$($GIT rev-parse --git-dir 2>/dev/null)
if [ "$?" -eq 0 ]; then
  GITREPO=true
else
  GITREPO=false
fi

HEAD=$($GIT rev-parse HEAD 2>/dev/null)
if [ "$?" -eq 0 ]; then
  GITHEAD=true
else
  GITEAD=false
fi

if [ "$GITREPO" = true ]; then
  if [ "$GITHEAD" = true ]; then
    COMMITER=$($GIT log --all --pretty=format:"%cn:%ce" | sort | uniq | tr '\n' ';' | rev | cut -c 2- | rev)
  fi
  NAME=`$GIT config --get user.name`
  EMAIL=`$GIT config --get user.email`
  KEY=`$GIT config --get user.signingKey`
fi

if [ -e "$FILE" ]; then
  if [ -f "$FILE" ]; then
    SAVEDPROFILE=$(cat "$FILE" | tr '\n' ';' | cut -c 2- | rev | cut -c 2- | rev)
  else
    echo -e "WARNING: $FILE: exists and is not a regular file"
    exit 1
  fi
else
  SAVEDPROFILE=""
fi

if [ -z "$NAME" ]; then
  NAME=$USER
fi
if [ -z "$EMAIL" ]; then
  EMAIL="$USER"@"`hostname`"
fi
if [ -z "$KEY" ]; then
  KEY=""
fi

case $1 in
  --version | version)
    $GIT --version
    echo -e $VERSION
  ;;
  commit)
    STAGED=$($GIT diff --staged --exit-code)
    if [ "$?" -ne 0 ] && [ "$GITREPO" = true ] && [ "$COMMIT_CHECK" = true ]; then
      trap 'interrupt "No commited"' INT
      echo -e "###\033[31m WARNING \033[0m###"
      echo -e "Your commit profile:"
      print_profile
      confirm="$NAME"
      read -p "Confirm name [ $confirm ]? " choice
      if [ "$choice" = "$confirm" ]; then
        $GIT "$@"
      else
        interrupt "No commited"
      fi
    else
      $GIT "$@"
    fi
  ;;
  profile)
    case $2 in
      -h | --help)
        print_help
      ;;
      reset)
        if [ "$GITREPO" = true ]; then
          trap 'interrupt "Profile not reset" ' INT
          read -p "Reset your profile (yes/no)? " choice
          if [ "$choice" = "yes" ] || [ "$choice" = "y" ]; then
            $GIT config --unset user.name
            $GIT config --unset user.email
            $GIT config --unset user.signingKey
            print_profile "$USER" "$USER@`hostname`" ""
          fi
        fi
      ;;
      log)
        if [ "$GITHEAD" = true ]; then
          case $3 in
            -l | --list)
              print_list_profile "$COMMITER"
            ;;
            -u |Â --use)
              trap 'interrupt "Profile not changed" ' INT
              print_list_profile "$COMMITER"
              select_profile "$COMMITER"
              use_profile "${profile[0]}:${profile[1]}:${profile[2]}"
            ;;
            "")
              print_list_profile "$COMMITER"
            ;;
            -s | --save)
              if ! [ -e "$FILE" ]; then
                echo -e "" > "$FILE"
              fi
              print_list_profile "$COMMITER"
              select_profile "$COMMITER"
              print_profile "${profile[0]}" "${profile[1]}" "${profile[2]}"
              add_profile "${profile[0]}:${profile[1]}:${profile[2]}"
            ;;
            *)
              echo -e "$NEWGIT --log: '$3' is not a $NEWGIT --log command. See '$NEWGIT -h'."
            ;;
          esac
        else
          $GIT "log"
        fi
      ;;
      -s | --save)
        if ! [ -e "$FILE" ]; then
          echo -e "" > "$FILE"
        fi
        add_profile "$NAME:$EMAIL:$KEY"
      ;;
      -n | --new)
        trap 'interrupt "No profile added"' INT
        while [ 1 ]
        do
          read -p "user.name: " newName
          if ! [ -z "$newName" ]; then
            break
          fi
        done
        while [ 1 ]
        do
          read -p "user.email: " newEmail
          if ! [ -z "$newEmail" ]; then
            break
          fi
        done
        while [ 1 ]
        do
          read -p "user.signingKey: " newKey
          if [ -z "$newKey" ]; then
            read -p "Empty key (yes/no)? " choice
            if [ "$choice" == "y" ] || [ "$choice" == "yes" ]; then
              break
            fi
          else
              break
          fi
        done
        if ! [ -e "$FILE" ]; then
          echo -e "" > "$FILE"
        fi
        add_profile "$newName:$newEmail:$newKey"
      ;;
      -l | --list)
        if [ -z "$SAVEDPROFILE" ]; then
          echo -e "No profile saved"
        else
          print_list_profile "$SAVEDPROFILE"
        fi
      ;;
      -d | --delete)
        trap 'interrupt "No profile deleted"' INT
        if [ -z "$SAVEDPROFILE" ]; then
          echo -e "No profile saved"
        else
          print_list_profile "$SAVEDPROFILE"
          while [ 1 ]
          do
            read -p "profile to delete: " idD
            if [[ $idD =~ ^[0-9]+$ ]] && [ $idD -ne 0 ] && [ $idD -le $id ]; then
              break
            else
              echo -e "Invalid id"
            fi
          done
          i=0
          # reset file
          echo -e "" > "$FILE"
          for profile in $SAVEDPROFILE
          do
            i=$(($i + 1))
            if [ $i -eq $idD ]; then
              echo -e "Delete: $profile"
            else
              add_profile "$profile"
            fi
          done
        fi
      ;;
      -u | --use)
        if [ "$GITREPO" = true ]; then
          trap 'interrupt "Profile not changed" ' INT
          if [ -z "$SAVEDPROFILE" ]; then
            echo -e "No profile saved"
          else
            print_list_profile "$SAVEDPROFILE"
            select_profile "$SAVEDPROFILE"
            use_profile "${profile[0]}:${profile[1]}:${profile[2]}"
          fi
        fi
      ;;
      "")
        echo -e "Your profile:"
        print_profile
      ;;
      *)
        echo -e "$NEWGIT: '$2' is not a $NEWGIT command. See '$NEWGIT -h'."
      ;;
    esac
  ;;
  *)
    $GIT "$@"
  ;;
esac

