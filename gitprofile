#!/bin/bash
### function ###

interrupt() {
  echo -e "\n$1"
  exit 0
}

print_help() {
  echo -e \
  "usage: $SCRIPT [OPTION]\n \
  version:\tprint version\n \
  help:\thelp of $SCRIPT\n \
  save:\tsave the current profile\n \
  new:\t\tadd a new profile\n \
  list:\tlist saved profile\n \
  delete:\tdelete one profile\n \
  use\t\tuse one profile saved\n \
  reset:\treset current profile\n \
  log:\t\toption based on git log\n \
     list:\tlist commiter profile from project log\n \
     use:\tuse commiter profile from project log\n \
     save:\tsave commiter profile from project log\n"
}

print_profile() {
  if [ -z $1 ] && [ -z $2 ] && [ -z $3] ; then
    name=$NAME
    email=$EMAIL
    key=$KEY
  else
    name=$1
    email=$2
    key=$3
  fi
  echo -e "  -> user.name: \033[36m$name\033[0m"
  echo -e "  -> user.email: \033[36m$email\033[0m"
  echo -e "  -> user.signingKey: \033[36m$key\033[0m"
}

add_profile() {
  IFS=':' read -a new <<< "$1"
  newName=${new[0]}
  newMail=${new[1]}
  newKey=${new[2]}
  listProfile=$(<$FILE)
  IFS=$'\n'
  for item in $listProfile
  do
    IFS=':' read -a p <<< "${item}"
    if [ "${p[0]}:${p[1]}:${p[2]}" = "$newName:$newMail:$newKey" ]; then
      echo -e "This profile is already saved"
      exit 0
    fi
  done
  echo -e "$newName:$newMail:$newKey:" >> "$FILE"
}

print_list_profile() {
  id=0
  IFS=";"
  for item in $1
  do
    id=$(($id + 1))
    IFS=':' read -a p <<< "${item}"
    if [ "${p[0]}" = "$NAME" ] && [ "${p[1]}" = "$EMAIL" ] && [ "${p[2]}" = "$KEY" ]; then
      echo -e "\033[32m [$id] ${p[0]} <${p[1]}> ${p[2]}\033[0m"
    else
      echo -e " [$id] ${p[0]} <${p[1]}> ${p[2]}"
    fi
  done
}

select_profile() {
  while [ 1 ]
  do
    read -p "Choice profile: " idC
    if [[ $idC =~ ^[0-9]+$ ]] && [ $idC -ne 0 ] && [ $idC -le $id ]; then
      break
    else
      echo -e "Invalid id"
    fi
  done
  i=$(($idC - 1))
  profiles=($1)
  IFS=':' read -a profile <<< "${profiles[$i]}"
}

use_profile() {
  IFS=':' read -a p <<< "$1"
  $GIT config user.name "${p[0]}"
  $GIT config user.email "${p[1]}"
  echo -e "${p[2]}"
  if ! [ -z "${p[2]}" ]; then
    $GIT config user.signingKey "${p[2]}"
  else
    $GIT config --unset user.signingKey
  fi
  echo -e "Profile changed in: "
  print_profile "${p[0]}" "${p[1]}" "${p[2]}"
}

### end function ###


GIT=`which git`
SCRIPT="gitprofile"
VERSION="0.4"
FILE="$HOME/.gitprofile"

DIR=$($GIT rev-parse --git-dir 2>/dev/null)
if [ "$?" -eq 0 ]; then
  GITREPO=true
else
  GITREPO=false
fi

HEAD=$($GIT rev-parse HEAD 2>/dev/null)
if [ "$?" -eq 0 ]; then
  GITHEAD=true
else
  GITEAD=false
fi

if [ "$GITREPO" = true ]; then
  # If git repo, get the local profile.
  NAME=`$GIT config --get user.name`
  EMAIL=`$GIT config --get user.email`
  KEY=`$GIT config --get user.signingKey`
fi

# If no profile name, use the default value.
if [ ! -n "$NAME" ]; then
  NAME=$USER
fi
# If no profile email, use the default value.
if [ ! -n "$EMAIL" ]; then
  EMAIL="$USER"@"`hostname`"
fi

if [ -e "$FILE" ]; then
  if [ -f "$FILE" ]; then
    SAVEDPROFILE=$(cat "$FILE" | tr '\n' ';' | cut -c 2- | rev | cut -c 2- | rev)
  else
    echo -e "WARNING: $FILE: exists and is not a regular file"
    exit 1
  fi
else
  SAVEDPROFILE=""
fi

case $1 in
  version)
    echo -e "$SCRIPT version $VERSION"
  ;;
  help)
    print_help
  ;;
  reset)
    if [ "$GITREPO" = true ]; then
      $GIT config --unset user.name
      $GIT config --unset user.email
      $GIT config --unset user.signingKey
      print_profile "$USER" "$USER@`hostname`" ""
    fi
  ;;
  log)
    if [ "$GITHEAD" = true ]; then
      AUCO=$($GIT log --all --pretty=format:"%an:%ae;%cn:%ce" | tr ';' '\n' | sort | uniq | tr '\n' ';' | rev | cut -c 2- | rev)
      case $3 in
        "" | list)
          print_list_profile "$AUCO"
        ;;
        use)
          trap 'interrupt "Profile not changed" ' INT
          print_list_profile "$AUCO"
          select_profile "$AUCO"
          use_profile "${profile[0]}:${profile[1]}:${profile[2]}"
        ;;
        save)
          if ! [ -e "$FILE" ]; then
            echo -e "" > "$FILE"
          fi
          print_list_profile "$AUCO"
          select_profile "$AUCO"
          print_profile "${profile[0]}" "${profile[1]}" "${profile[2]}"
          add_profile "${profile[0]}:${profile[1]}:${profile[2]}"
        ;;
        *)
          echo -e "$SCRIPT log: '$2' is not a $SCRIPT log command. See '$SCRIPT help'."
        ;;
      esac
    else
      echo -e "the current repository does not have any commit yet"
    fi
  ;;
  save)
    if ! [ -e "$FILE" ]; then
      echo -e "" > "$FILE"
    fi
    add_profile "$NAME:$EMAIL:$KEY"
  ;;
  new)
    trap 'interrupt "No profile added"' INT
    while [ 1 ]
    do
      read -p "user.name: " newName
      if ! [ -z "$newName" ]; then
        break
      fi
    done
    while [ 1 ]
    do
      read -p "user.email: " newEmail
      if ! [ -z "$newEmail" ]; then
        break
      fi
    done
    while [ 1 ]
    do
      read -p "user.signingKey: " newKey
      if [ -z "$newKey" ]; then
        read -p "Empty key (yes/no)? " choice
        if [ "$choice" == "y" ] || [ "$choice" == "yes" ]; then
          break
        fi
      else
        break
      fi
    done
    if ! [ -e "$FILE" ]; then
      echo -e "" > "$FILE"
    fi
    add_profile "$newName:$newEmail:$newKey"
  ;;
  list)
    if [ -z "$SAVEDPROFILE" ]; then
      echo -e "No profile saved"
    else
      print_list_profile "$SAVEDPROFILE"
    fi
  ;;
  delete)
    trap 'interrupt "No profile deleted"' INT
    if [ -z "$SAVEDPROFILE" ]; then
      echo -e "No profile saved"
    else
      print_list_profile "$SAVEDPROFILE"
      while [ 1 ]
      do
        read -p "profile to delete: " idD
        if [[ $idD =~ ^[0-9]+$ ]] && [ $idD -ne 0 ] && [ $idD -le $id ]; then
          break
        else
          echo -e "Invalid id"
        fi
      done
      i=0
      # reset file
      echo -e "" > "$FILE"
      for profile in $SAVEDPROFILE
      do
        i=$(($i + 1))
        if [ $i -eq $idD ]; then
          echo -e "Delete: $profile"
        else
          add_profile "$profile"
        fi
      done
    fi
  ;;
  use)
    if [ "$GITREPO" = true ]; then
      trap 'interrupt "Profile not changed" ' INT
      if [ -z "$SAVEDPROFILE" ]; then
        echo -e "No profile saved"
      else
        print_list_profile "$SAVEDPROFILE"
        select_profile "$SAVEDPROFILE"
        use_profile "${profile[0]}:${profile[1]}:${profile[2]}"
      fi
    fi
  ;;
  "")
    echo -e "Your profile:"
    print_profile
  ;;
  *)
    echo -e "$SCRIPT: '$1' is not a $SCRIPT command. See '$SCRIPT help'."
  ;;
esac

